/*
 * generated by Xtext 2.9.2
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Rules");
		private final Assignment cRuleFragmentsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRuleFragmentsRuleFragmentsParserRuleCall_0 = (RuleCall)cRuleFragmentsAssignment.eContents().get(0);
		
		//Rules:
		//	ruleFragments+=RuleFragments*;
		@Override public ParserRule getRule() { return rule; }
		
		//ruleFragments+=RuleFragments*
		public Assignment getRuleFragmentsAssignment() { return cRuleFragmentsAssignment; }
		
		//RuleFragments
		public RuleCall getRuleFragmentsRuleFragmentsParserRuleCall_0() { return cRuleFragmentsRuleFragmentsParserRuleCall_0; }
	}
	public class RuleFragmentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RuleFragments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRuleNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRuleNameIDTerminalRuleCall_1_0 = (RuleCall)cRuleNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRuleBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRuleBodyRuleBodyParserRuleCall_3_0 = (RuleCall)cRuleBodyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RuleFragments:
		//	'rule' ruleName=ID
		//	'{'
		//	ruleBody=RuleBody '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' ruleName=ID '{' ruleBody=RuleBody '}'
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//ruleName=ID
		public Assignment getRuleNameAssignment_1() { return cRuleNameAssignment_1; }
		
		//ID
		public RuleCall getRuleNameIDTerminalRuleCall_1_0() { return cRuleNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//ruleBody=RuleBody
		public Assignment getRuleBodyAssignment_3() { return cRuleBodyAssignment_3; }
		
		//RuleBody
		public RuleCall getRuleBodyRuleBodyParserRuleCall_3_0() { return cRuleBodyRuleBodyParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RuleBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RuleBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventEventParserRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		private final Assignment cSubEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubEventSubEventParserRuleCall_2_0 = (RuleCall)cSubEventAssignment_2.eContents().get(0);
		
		//RuleBody:
		//	'when' Event=Event subEvent+=SubEvent*;
		@Override public ParserRule getRule() { return rule; }
		
		//'when' Event=Event subEvent+=SubEvent*
		public Group getGroup() { return cGroup; }
		
		//'when'
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }
		
		//Event=Event
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }
		
		//Event
		public RuleCall getEventEventParserRuleCall_1_0() { return cEventEventParserRuleCall_1_0; }
		
		//subEvent+=SubEvent*
		public Assignment getSubEventAssignment_2() { return cSubEventAssignment_2; }
		
		//SubEvent
		public RuleCall getSubEventSubEventParserRuleCall_2_0() { return cSubEventSubEventParserRuleCall_2_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributeAttributeEnumRuleCall_0_0 = (RuleCall)cAttributeAssignment_0.eContents().get(0);
		private final Assignment cSymbolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSymbolSymbolEnumRuleCall_1_0 = (RuleCall)cSymbolAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Event:
		//	attribute=Attribute symbol=Symbol value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//attribute=Attribute symbol=Symbol value=INT
		public Group getGroup() { return cGroup; }
		
		//attribute=Attribute
		public Assignment getAttributeAssignment_0() { return cAttributeAssignment_0; }
		
		//Attribute
		public RuleCall getAttributeAttributeEnumRuleCall_0_0() { return cAttributeAttributeEnumRuleCall_0_0; }
		
		//symbol=Symbol
		public Assignment getSymbolAssignment_1() { return cSymbolAssignment_1; }
		
		//Symbol
		public RuleCall getSymbolSymbolEnumRuleCall_1_0() { return cSymbolSymbolEnumRuleCall_1_0; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class SubEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SubEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAmountEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAmountEventActionEnumRuleCall_1_0 = (RuleCall)cAmountEventAssignment_1.eContents().get(0);
		private final Assignment cEntityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntityEntityEnumRuleCall_2_0 = (RuleCall)cEntityAssignment_2.eContents().get(0);
		
		//SubEvent:
		//	'then ' amountEvent=Action entity=Entity;
		@Override public ParserRule getRule() { return rule; }
		
		//'then ' amountEvent=Action entity=Entity
		public Group getGroup() { return cGroup; }
		
		//'then '
		public Keyword getThenKeyword_0() { return cThenKeyword_0; }
		
		//amountEvent=Action
		public Assignment getAmountEventAssignment_1() { return cAmountEventAssignment_1; }
		
		//Action
		public RuleCall getAmountEventActionEnumRuleCall_1_0() { return cAmountEventActionEnumRuleCall_1_0; }
		
		//entity=Entity
		public Assignment getEntityAssignment_2() { return cEntityAssignment_2; }
		
		//Entity
		public RuleCall getEntityEntityEnumRuleCall_2_0() { return cEntityEntityEnumRuleCall_2_0; }
	}
	
	public class AttributeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTEMPERATUREEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTEMPERATURETemperatureKeyword_0_0 = (Keyword)cTEMPERATUREEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVIBRATIONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVIBRATIONVibrationKeyword_1_0 = (Keyword)cVIBRATIONEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHUMIDITYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHUMIDITYHumidityKeyword_2_0 = (Keyword)cHUMIDITYEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Attribute:
		//	TEMPERATURE='temperature' | VIBRATION='vibration' | HUMIDITY='humidity';
		public EnumRule getRule() { return rule; }
		
		//TEMPERATURE='temperature' | VIBRATION='vibration' | HUMIDITY='humidity'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TEMPERATURE='temperature'
		public EnumLiteralDeclaration getTEMPERATUREEnumLiteralDeclaration_0() { return cTEMPERATUREEnumLiteralDeclaration_0; }
		
		//'temperature'
		public Keyword getTEMPERATURETemperatureKeyword_0_0() { return cTEMPERATURETemperatureKeyword_0_0; }
		
		//VIBRATION='vibration'
		public EnumLiteralDeclaration getVIBRATIONEnumLiteralDeclaration_1() { return cVIBRATIONEnumLiteralDeclaration_1; }
		
		//'vibration'
		public Keyword getVIBRATIONVibrationKeyword_1_0() { return cVIBRATIONVibrationKeyword_1_0; }
		
		//HUMIDITY='humidity'
		public EnumLiteralDeclaration getHUMIDITYEnumLiteralDeclaration_2() { return cHUMIDITYEnumLiteralDeclaration_2; }
		
		//'humidity'
		public Keyword getHUMIDITYHumidityKeyword_2_0() { return cHUMIDITYHumidityKeyword_2_0; }
	}
	public class SymbolElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Symbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGREATERLessThanSignKeyword_0_0 = (Keyword)cGREATEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLESSGreaterThanSignKeyword_1_0 = (Keyword)cLESSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Symbol:
		//	GREATER='<' | LESS='>';
		public EnumRule getRule() { return rule; }
		
		//GREATER='<' | LESS='>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GREATER='<'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_0() { return cGREATEREnumLiteralDeclaration_0; }
		
		//'<'
		public Keyword getGREATERLessThanSignKeyword_0_0() { return cGREATERLessThanSignKeyword_0_0; }
		
		//LESS='>'
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_1() { return cLESSEnumLiteralDeclaration_1; }
		
		//'>'
		public Keyword getLESSGreaterThanSignKeyword_1_0() { return cLESSGreaterThanSignKeyword_1_0; }
	}
	public class ActionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTURN_ONEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTURN_ONTurn_onKeyword_0_0 = (Keyword)cTURN_ONEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTURN_OFFEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTURN_OFFTurn_offKeyword_1_0 = (Keyword)cTURN_OFFEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Action:
		//	TURN_ON='turn_on' | TURN_OFF='turn_off';
		public EnumRule getRule() { return rule; }
		
		//TURN_ON='turn_on' | TURN_OFF='turn_off'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TURN_ON='turn_on'
		public EnumLiteralDeclaration getTURN_ONEnumLiteralDeclaration_0() { return cTURN_ONEnumLiteralDeclaration_0; }
		
		//'turn_on'
		public Keyword getTURN_ONTurn_onKeyword_0_0() { return cTURN_ONTurn_onKeyword_0_0; }
		
		//TURN_OFF='turn_off'
		public EnumLiteralDeclaration getTURN_OFFEnumLiteralDeclaration_1() { return cTURN_OFFEnumLiteralDeclaration_1; }
		
		//'turn_off'
		public Keyword getTURN_OFFTurn_offKeyword_1_0() { return cTURN_OFFTurn_offKeyword_1_0; }
	}
	public class EntityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLIGHT_BULBEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLIGHT_BULBLight_bulbKeyword_0_0 = (Keyword)cLIGHT_BULBEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFANEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFANFanKeyword_1_0 = (Keyword)cFANEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cACEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cACAcKeyword_2_0 = (Keyword)cACEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Entity:
		//	LIGHT_BULB='light_bulb' | FAN='fan' | AC='ac';
		public EnumRule getRule() { return rule; }
		
		//LIGHT_BULB='light_bulb' | FAN='fan' | AC='ac'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LIGHT_BULB='light_bulb'
		public EnumLiteralDeclaration getLIGHT_BULBEnumLiteralDeclaration_0() { return cLIGHT_BULBEnumLiteralDeclaration_0; }
		
		//'light_bulb'
		public Keyword getLIGHT_BULBLight_bulbKeyword_0_0() { return cLIGHT_BULBLight_bulbKeyword_0_0; }
		
		//FAN='fan'
		public EnumLiteralDeclaration getFANEnumLiteralDeclaration_1() { return cFANEnumLiteralDeclaration_1; }
		
		//'fan'
		public Keyword getFANFanKeyword_1_0() { return cFANFanKeyword_1_0; }
		
		//AC='ac'
		public EnumLiteralDeclaration getACEnumLiteralDeclaration_2() { return cACEnumLiteralDeclaration_2; }
		
		//'ac'
		public Keyword getACAcKeyword_2_0() { return cACAcKeyword_2_0; }
	}
	
	private final RulesElements pRules;
	private final RuleFragmentsElements pRuleFragments;
	private final RuleBodyElements pRuleBody;
	private final EventElements pEvent;
	private final AttributeElements eAttribute;
	private final SymbolElements eSymbol;
	private final SubEventElements pSubEvent;
	private final ActionElements eAction;
	private final EntityElements eEntity;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRules = new RulesElements();
		this.pRuleFragments = new RuleFragmentsElements();
		this.pRuleBody = new RuleBodyElements();
		this.pEvent = new EventElements();
		this.eAttribute = new AttributeElements();
		this.eSymbol = new SymbolElements();
		this.pSubEvent = new SubEventElements();
		this.eAction = new ActionElements();
		this.eEntity = new EntityElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Rules:
	//	ruleFragments+=RuleFragments*;
	public RulesElements getRulesAccess() {
		return pRules;
	}
	
	public ParserRule getRulesRule() {
		return getRulesAccess().getRule();
	}
	
	//RuleFragments:
	//	'rule' ruleName=ID
	//	'{'
	//	ruleBody=RuleBody '}';
	public RuleFragmentsElements getRuleFragmentsAccess() {
		return pRuleFragments;
	}
	
	public ParserRule getRuleFragmentsRule() {
		return getRuleFragmentsAccess().getRule();
	}
	
	//RuleBody:
	//	'when' Event=Event subEvent+=SubEvent*;
	public RuleBodyElements getRuleBodyAccess() {
		return pRuleBody;
	}
	
	public ParserRule getRuleBodyRule() {
		return getRuleBodyAccess().getRule();
	}
	
	//Event:
	//	attribute=Attribute symbol=Symbol value=INT;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//enum Attribute:
	//	TEMPERATURE='temperature' | VIBRATION='vibration' | HUMIDITY='humidity';
	public AttributeElements getAttributeAccess() {
		return eAttribute;
	}
	
	public EnumRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//enum Symbol:
	//	GREATER='<' | LESS='>';
	public SymbolElements getSymbolAccess() {
		return eSymbol;
	}
	
	public EnumRule getSymbolRule() {
		return getSymbolAccess().getRule();
	}
	
	//SubEvent:
	//	'then ' amountEvent=Action entity=Entity;
	public SubEventElements getSubEventAccess() {
		return pSubEvent;
	}
	
	public ParserRule getSubEventRule() {
		return getSubEventAccess().getRule();
	}
	
	//enum Action:
	//	TURN_ON='turn_on' | TURN_OFF='turn_off';
	public ActionElements getActionAccess() {
		return eAction;
	}
	
	public EnumRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//enum Entity:
	//	LIGHT_BULB='light_bulb' | FAN='fan' | AC='ac';
	public EntityElements getEntityAccess() {
		return eEntity;
	}
	
	public EnumRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

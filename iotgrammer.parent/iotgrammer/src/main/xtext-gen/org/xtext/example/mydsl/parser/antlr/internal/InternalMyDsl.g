/*
 * generated by Xtext 2.9.2
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Rules";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRules
entryRuleRules returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRulesRule()); }
	iv_ruleRules=ruleRules
	{ $current=$iv_ruleRules.current; }
	EOF;

// Rule Rules
ruleRules returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getRulesAccess().getRuleFragmentsRuleFragmentsParserRuleCall_0());
			}
			lv_ruleFragments_0_0=ruleRuleFragments
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getRulesRule());
				}
				add(
					$current,
					"ruleFragments",
					lv_ruleFragments_0_0,
					"org.xtext.example.mydsl.MyDsl.RuleFragments");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleRuleFragments
entryRuleRuleFragments returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleFragmentsRule()); }
	iv_ruleRuleFragments=ruleRuleFragments
	{ $current=$iv_ruleRuleFragments.current; }
	EOF;

// Rule RuleFragments
ruleRuleFragments returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rule'
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleFragmentsAccess().getRuleKeyword_0());
		}
		(
			(
				lv_ruleName_1_0=RULE_ID
				{
					newLeafNode(lv_ruleName_1_0, grammarAccess.getRuleFragmentsAccess().getRuleNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleFragmentsRule());
					}
					setWithLastConsumed(
						$current,
						"ruleName",
						lv_ruleName_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRuleFragmentsAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleFragmentsAccess().getRuleBodyRuleBodyParserRuleCall_3_0());
				}
				lv_ruleBody_3_0=ruleRuleBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleFragmentsRule());
					}
					set(
						$current,
						"ruleBody",
						lv_ruleBody_3_0,
						"org.xtext.example.mydsl.MyDsl.RuleBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getRuleFragmentsAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleRuleBody
entryRuleRuleBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleBodyRule()); }
	iv_ruleRuleBody=ruleRuleBody
	{ $current=$iv_ruleRuleBody.current; }
	EOF;

// Rule RuleBody
ruleRuleBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='when'
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleBodyAccess().getWhenKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleBodyAccess().getEventEventParserRuleCall_1_0());
				}
				lv_Event_1_0=ruleEvent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleBodyRule());
					}
					set(
						$current,
						"Event",
						lv_Event_1_0,
						"org.xtext.example.mydsl.MyDsl.Event");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleBodyAccess().getSubEventSubEventParserRuleCall_2_0());
				}
				lv_subEvent_2_0=ruleSubEvent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleBodyRule());
					}
					add(
						$current,
						"subEvent",
						lv_subEvent_2_0,
						"org.xtext.example.mydsl.MyDsl.SubEvent");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	iv_ruleEvent=ruleEvent
	{ $current=$iv_ruleEvent.current; }
	EOF;

// Rule Event
ruleEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEventAccess().getAttributeAttributeEnumRuleCall_0_0());
				}
				lv_attribute_0_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventRule());
					}
					set(
						$current,
						"attribute",
						lv_attribute_0_0,
						"org.xtext.example.mydsl.MyDsl.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEventAccess().getSymbolSymbolEnumRuleCall_1_0());
				}
				lv_symbol_1_0=ruleSymbol
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventRule());
					}
					set(
						$current,
						"symbol",
						lv_symbol_1_0,
						"org.xtext.example.mydsl.MyDsl.Symbol");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_value_2_0=RULE_INT
				{
					newLeafNode(lv_value_2_0, grammarAccess.getEventAccess().getValueINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleSubEvent
entryRuleSubEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubEventRule()); }
	iv_ruleSubEvent=ruleSubEvent
	{ $current=$iv_ruleSubEvent.current; }
	EOF;

// Rule SubEvent
ruleSubEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='then '
		{
			newLeafNode(otherlv_0, grammarAccess.getSubEventAccess().getThenKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubEventAccess().getAmountEventActionEnumRuleCall_1_0());
				}
				lv_amountEvent_1_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubEventRule());
					}
					set(
						$current,
						"amountEvent",
						lv_amountEvent_1_0,
						"org.xtext.example.mydsl.MyDsl.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSubEventAccess().getEntityEntityEnumRuleCall_2_0());
				}
				lv_entity_2_0=ruleEntity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubEventRule());
					}
					set(
						$current,
						"entity",
						lv_entity_2_0,
						"org.xtext.example.mydsl.MyDsl.Entity");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Rule Attribute
ruleAttribute returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='temperature'
			{
				$current = grammarAccess.getAttributeAccess().getTEMPERATUREEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAttributeAccess().getTEMPERATUREEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='vibration'
			{
				$current = grammarAccess.getAttributeAccess().getVIBRATIONEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAttributeAccess().getVIBRATIONEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='humidity'
			{
				$current = grammarAccess.getAttributeAccess().getHUMIDITYEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAttributeAccess().getHUMIDITYEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule Symbol
ruleSymbol returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='<'
			{
				$current = grammarAccess.getSymbolAccess().getGREATEREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSymbolAccess().getGREATEREnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>'
			{
				$current = grammarAccess.getSymbolAccess().getLESSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSymbolAccess().getLESSEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Action
ruleAction returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='turn_on'
			{
				$current = grammarAccess.getActionAccess().getTURN_ONEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getActionAccess().getTURN_ONEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='turn_off'
			{
				$current = grammarAccess.getActionAccess().getTURN_OFFEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getActionAccess().getTURN_OFFEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Entity
ruleEntity returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='light_bulb'
			{
				$current = grammarAccess.getEntityAccess().getLIGHT_BULBEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEntityAccess().getLIGHT_BULBEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='fan'
			{
				$current = grammarAccess.getEntityAccess().getFANEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEntityAccess().getFANEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='ac'
			{
				$current = grammarAccess.getEntityAccess().getACEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getEntityAccess().getACEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

/**
 * generated by Xtext 2.9.2
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.Action;
import org.xtext.example.mydsl.myDsl.Entity;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.SubEvent;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sub Event</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SubEventImpl#getAmountEvent <em>Amount Event</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SubEventImpl#getEntity <em>Entity</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SubEventImpl extends MinimalEObjectImpl.Container implements SubEvent
{
  /**
   * The default value of the '{@link #getAmountEvent() <em>Amount Event</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAmountEvent()
   * @generated
   * @ordered
   */
  protected static final Action AMOUNT_EVENT_EDEFAULT = Action.TURN_ON;

  /**
   * The cached value of the '{@link #getAmountEvent() <em>Amount Event</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAmountEvent()
   * @generated
   * @ordered
   */
  protected Action amountEvent = AMOUNT_EVENT_EDEFAULT;

  /**
   * The default value of the '{@link #getEntity() <em>Entity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntity()
   * @generated
   * @ordered
   */
  protected static final Entity ENTITY_EDEFAULT = Entity.LIGHT_BULB;

  /**
   * The cached value of the '{@link #getEntity() <em>Entity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntity()
   * @generated
   * @ordered
   */
  protected Entity entity = ENTITY_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SubEventImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.SUB_EVENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Action getAmountEvent()
  {
    return amountEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAmountEvent(Action newAmountEvent)
  {
    Action oldAmountEvent = amountEvent;
    amountEvent = newAmountEvent == null ? AMOUNT_EVENT_EDEFAULT : newAmountEvent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SUB_EVENT__AMOUNT_EVENT, oldAmountEvent, amountEvent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity getEntity()
  {
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEntity(Entity newEntity)
  {
    Entity oldEntity = entity;
    entity = newEntity == null ? ENTITY_EDEFAULT : newEntity;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SUB_EVENT__ENTITY, oldEntity, entity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.SUB_EVENT__AMOUNT_EVENT:
        return getAmountEvent();
      case MyDslPackage.SUB_EVENT__ENTITY:
        return getEntity();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.SUB_EVENT__AMOUNT_EVENT:
        setAmountEvent((Action)newValue);
        return;
      case MyDslPackage.SUB_EVENT__ENTITY:
        setEntity((Entity)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SUB_EVENT__AMOUNT_EVENT:
        setAmountEvent(AMOUNT_EVENT_EDEFAULT);
        return;
      case MyDslPackage.SUB_EVENT__ENTITY:
        setEntity(ENTITY_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SUB_EVENT__AMOUNT_EVENT:
        return amountEvent != AMOUNT_EVENT_EDEFAULT;
      case MyDslPackage.SUB_EVENT__ENTITY:
        return entity != ENTITY_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (amountEvent: ");
    result.append(amountEvent);
    result.append(", entity: ");
    result.append(entity);
    result.append(')');
    return result.toString();
  }

} //SubEventImpl

/*
 * generated by Xtext 2.9.2
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleRules
entryRuleRules
:
{ before(grammarAccess.getRulesRule()); }
	 ruleRules
{ after(grammarAccess.getRulesRule()); } 
	 EOF 
;

// Rule Rules
ruleRules 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRulesAccess().getRuleFragmentsAssignment()); }
		(rule__Rules__RuleFragmentsAssignment)*
		{ after(grammarAccess.getRulesAccess().getRuleFragmentsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRuleFragments
entryRuleRuleFragments
:
{ before(grammarAccess.getRuleFragmentsRule()); }
	 ruleRuleFragments
{ after(grammarAccess.getRuleFragmentsRule()); } 
	 EOF 
;

// Rule RuleFragments
ruleRuleFragments 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleFragmentsAccess().getGroup()); }
		(rule__RuleFragments__Group__0)
		{ after(grammarAccess.getRuleFragmentsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRuleBody
entryRuleRuleBody
:
{ before(grammarAccess.getRuleBodyRule()); }
	 ruleRuleBody
{ after(grammarAccess.getRuleBodyRule()); } 
	 EOF 
;

// Rule RuleBody
ruleRuleBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleBodyAccess().getGroup()); }
		(rule__RuleBody__Group__0)
		{ after(grammarAccess.getRuleBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePayerEvent
entryRulePayerEvent
:
{ before(grammarAccess.getPayerEventRule()); }
	 rulePayerEvent
{ after(grammarAccess.getPayerEventRule()); } 
	 EOF 
;

// Rule PayerEvent
rulePayerEvent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPayerEventAccess().getGroup()); }
		(rule__PayerEvent__Group__0)
		{ after(grammarAccess.getPayerEventAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubEvent
entryRuleSubEvent
:
{ before(grammarAccess.getSubEventRule()); }
	 ruleSubEvent
{ after(grammarAccess.getSubEventRule()); } 
	 EOF 
;

// Rule SubEvent
ruleSubEvent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubEventAccess().getGroup()); }
		(rule__SubEvent__Group__0)
		{ after(grammarAccess.getSubEventAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule PayerName
rulePayerName
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPayerNameAccess().getAlternatives()); }
		(rule__PayerName__Alternatives)
		{ after(grammarAccess.getPayerNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule PayerEventName
rulePayerEventName
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPayerEventNameAccess().getAlternatives()); }
		(rule__PayerEventName__Alternatives)
		{ after(grammarAccess.getPayerEventNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Symbol
ruleSymbol
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymbolAccess().getAlternatives()); }
		(rule__Symbol__Alternatives)
		{ after(grammarAccess.getSymbolAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule AmountEvent
ruleAmountEvent
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAmountEventAccess().getAlternatives()); }
		(rule__AmountEvent__Alternatives)
		{ after(grammarAccess.getAmountEventAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PayerName__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPayerNameAccess().getMINDTREEEnumLiteralDeclaration_0()); }
		('mindtree')
		{ after(grammarAccess.getPayerNameAccess().getMINDTREEEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getPayerNameAccess().getROHITEnumLiteralDeclaration_1()); }
		('rohit')
		{ after(grammarAccess.getPayerNameAccess().getROHITEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getPayerNameAccess().getABHISHEKEnumLiteralDeclaration_2()); }
		('abhishek')
		{ after(grammarAccess.getPayerNameAccess().getABHISHEKEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PayerEventName__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPayerEventNameAccess().getCREDITEnumLiteralDeclaration_0()); }
		('credit')
		{ after(grammarAccess.getPayerEventNameAccess().getCREDITEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getPayerEventNameAccess().getDEBITEnumLiteralDeclaration_1()); }
		('debit')
		{ after(grammarAccess.getPayerEventNameAccess().getDEBITEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Symbol__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymbolAccess().getGREATEREnumLiteralDeclaration_0()); }
		('<')
		{ after(grammarAccess.getSymbolAccess().getGREATEREnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getSymbolAccess().getLESSEnumLiteralDeclaration_1()); }
		('>')
		{ after(grammarAccess.getSymbolAccess().getLESSEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AmountEvent__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAmountEventAccess().getTRANSFEREnumLiteralDeclaration_0()); }
		('transfer')
		{ after(grammarAccess.getAmountEventAccess().getTRANSFEREnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getAmountEventAccess().getREQUESTEnumLiteralDeclaration_1()); }
		('request')
		{ after(grammarAccess.getAmountEventAccess().getREQUESTEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleFragments__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleFragments__Group__0__Impl
	rule__RuleFragments__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleFragments__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleFragmentsAccess().getCreateRuleKeyword_0()); }
	'create rule'
	{ after(grammarAccess.getRuleFragmentsAccess().getCreateRuleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleFragments__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleFragments__Group__1__Impl
	rule__RuleFragments__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleFragments__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleFragmentsAccess().getRuleNameAssignment_1()); }
	(rule__RuleFragments__RuleNameAssignment_1)
	{ after(grammarAccess.getRuleFragmentsAccess().getRuleNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleFragments__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleFragments__Group__2__Impl
	rule__RuleFragments__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleFragments__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleFragmentsAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getRuleFragmentsAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleFragments__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleFragments__Group__3__Impl
	rule__RuleFragments__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleFragments__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleFragmentsAccess().getRuleBodyAssignment_3()); }
	(rule__RuleFragments__RuleBodyAssignment_3)
	{ after(grammarAccess.getRuleFragmentsAccess().getRuleBodyAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleFragments__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleFragments__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleFragments__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleFragmentsAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getRuleFragmentsAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleBody__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleBody__Group__0__Impl
	rule__RuleBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleBody__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleBodyAccess().getWhenKeyword_0()); }
	'when'
	{ after(grammarAccess.getRuleBodyAccess().getWhenKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleBody__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleBody__Group__1__Impl
	rule__RuleBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleBody__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleBodyAccess().getPayerEventAssignment_1()); }
	(rule__RuleBody__PayerEventAssignment_1)
	{ after(grammarAccess.getRuleBodyAccess().getPayerEventAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleBody__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleBody__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleBody__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleBodyAccess().getSubEventAssignment_2()); }
	(rule__RuleBody__SubEventAssignment_2)*
	{ after(grammarAccess.getRuleBodyAccess().getSubEventAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PayerEvent__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PayerEvent__Group__0__Impl
	rule__PayerEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PayerEvent__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPayerEventAccess().getPayerNameAssignment_0()); }
	(rule__PayerEvent__PayerNameAssignment_0)
	{ after(grammarAccess.getPayerEventAccess().getPayerNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PayerEvent__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PayerEvent__Group__1__Impl
	rule__PayerEvent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PayerEvent__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPayerEventAccess().getPayerEventNameAssignment_1()); }
	(rule__PayerEvent__PayerEventNameAssignment_1)
	{ after(grammarAccess.getPayerEventAccess().getPayerEventNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PayerEvent__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PayerEvent__Group__2__Impl
	rule__PayerEvent__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PayerEvent__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPayerEventAccess().getSymbolAssignment_2()); }
	(rule__PayerEvent__SymbolAssignment_2)
	{ after(grammarAccess.getPayerEventAccess().getSymbolAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PayerEvent__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PayerEvent__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PayerEvent__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPayerEventAccess().getAmountAssignment_3()); }
	(rule__PayerEvent__AmountAssignment_3)
	{ after(grammarAccess.getPayerEventAccess().getAmountAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubEvent__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubEvent__Group__0__Impl
	rule__SubEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubEvent__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubEventAccess().getThenKeyword_0()); }
	'then '
	{ after(grammarAccess.getSubEventAccess().getThenKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubEvent__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubEvent__Group__1__Impl
	rule__SubEvent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubEvent__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubEventAccess().getAmountEventAssignment_1()); }
	(rule__SubEvent__AmountEventAssignment_1)
	{ after(grammarAccess.getSubEventAccess().getAmountEventAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubEvent__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubEvent__Group__2__Impl
	rule__SubEvent__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubEvent__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubEventAccess().getAmountAssignment_2()); }
	(rule__SubEvent__AmountAssignment_2)
	{ after(grammarAccess.getSubEventAccess().getAmountAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubEvent__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubEvent__Group__3__Impl
	rule__SubEvent__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SubEvent__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubEventAccess().getToKeyword_3()); }
	'to'
	{ after(grammarAccess.getSubEventAccess().getToKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubEvent__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubEvent__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubEvent__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubEventAccess().getPayerNameAssignment_4()); }
	(rule__SubEvent__PayerNameAssignment_4)
	{ after(grammarAccess.getSubEventAccess().getPayerNameAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rules__RuleFragmentsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRulesAccess().getRuleFragmentsRuleFragmentsParserRuleCall_0()); }
		ruleRuleFragments
		{ after(grammarAccess.getRulesAccess().getRuleFragmentsRuleFragmentsParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleFragments__RuleNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleFragmentsAccess().getRuleNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRuleFragmentsAccess().getRuleNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleFragments__RuleBodyAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleFragmentsAccess().getRuleBodyRuleBodyParserRuleCall_3_0()); }
		ruleRuleBody
		{ after(grammarAccess.getRuleFragmentsAccess().getRuleBodyRuleBodyParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleBody__PayerEventAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleBodyAccess().getPayerEventPayerEventParserRuleCall_1_0()); }
		rulePayerEvent
		{ after(grammarAccess.getRuleBodyAccess().getPayerEventPayerEventParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleBody__SubEventAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleBodyAccess().getSubEventSubEventParserRuleCall_2_0()); }
		ruleSubEvent
		{ after(grammarAccess.getRuleBodyAccess().getSubEventSubEventParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PayerEvent__PayerNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPayerEventAccess().getPayerNamePayerNameEnumRuleCall_0_0()); }
		rulePayerName
		{ after(grammarAccess.getPayerEventAccess().getPayerNamePayerNameEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PayerEvent__PayerEventNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPayerEventAccess().getPayerEventNamePayerEventNameEnumRuleCall_1_0()); }
		rulePayerEventName
		{ after(grammarAccess.getPayerEventAccess().getPayerEventNamePayerEventNameEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PayerEvent__SymbolAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPayerEventAccess().getSymbolSymbolEnumRuleCall_2_0()); }
		ruleSymbol
		{ after(grammarAccess.getPayerEventAccess().getSymbolSymbolEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PayerEvent__AmountAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPayerEventAccess().getAmountINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getPayerEventAccess().getAmountINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubEvent__AmountEventAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubEventAccess().getAmountEventAmountEventEnumRuleCall_1_0()); }
		ruleAmountEvent
		{ after(grammarAccess.getSubEventAccess().getAmountEventAmountEventEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubEvent__AmountAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubEventAccess().getAmountINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getSubEventAccess().getAmountINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubEvent__PayerNameAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubEventAccess().getPayerNamePayerNameEnumRuleCall_4_0()); }
		rulePayerName
		{ after(grammarAccess.getSubEventAccess().getPayerNamePayerNameEnumRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

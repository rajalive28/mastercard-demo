/*
 * generated by Xtext 2.9.2
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.PayerEvent;
import org.xtext.example.mydsl.myDsl.RuleBody;
import org.xtext.example.mydsl.myDsl.RuleFragments;
import org.xtext.example.mydsl.myDsl.Rules;
import org.xtext.example.mydsl.myDsl.SubEvent;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.PAYER_EVENT:
				sequence_PayerEvent(context, (PayerEvent) semanticObject); 
				return; 
			case MyDslPackage.RULE_BODY:
				sequence_RuleBody(context, (RuleBody) semanticObject); 
				return; 
			case MyDslPackage.RULE_FRAGMENTS:
				sequence_RuleFragments(context, (RuleFragments) semanticObject); 
				return; 
			case MyDslPackage.RULES:
				sequence_Rules(context, (Rules) semanticObject); 
				return; 
			case MyDslPackage.SUB_EVENT:
				sequence_SubEvent(context, (SubEvent) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     PayerEvent returns PayerEvent
	 *
	 * Constraint:
	 *     (payerName=PayerName payerEventName=PayerEventName symbol=Symbol amount=INT)
	 */
	protected void sequence_PayerEvent(ISerializationContext context, PayerEvent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PAYER_EVENT__PAYER_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PAYER_EVENT__PAYER_NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PAYER_EVENT__PAYER_EVENT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PAYER_EVENT__PAYER_EVENT_NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PAYER_EVENT__SYMBOL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PAYER_EVENT__SYMBOL));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PAYER_EVENT__AMOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PAYER_EVENT__AMOUNT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPayerEventAccess().getPayerNamePayerNameEnumRuleCall_0_0(), semanticObject.getPayerName());
		feeder.accept(grammarAccess.getPayerEventAccess().getPayerEventNamePayerEventNameEnumRuleCall_1_0(), semanticObject.getPayerEventName());
		feeder.accept(grammarAccess.getPayerEventAccess().getSymbolSymbolEnumRuleCall_2_0(), semanticObject.getSymbol());
		feeder.accept(grammarAccess.getPayerEventAccess().getAmountINTTerminalRuleCall_3_0(), semanticObject.getAmount());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RuleBody returns RuleBody
	 *
	 * Constraint:
	 *     (payerEvent=PayerEvent subEvent+=SubEvent*)
	 */
	protected void sequence_RuleBody(ISerializationContext context, RuleBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RuleFragments returns RuleFragments
	 *
	 * Constraint:
	 *     (ruleName=ID ruleBody=RuleBody)
	 */
	protected void sequence_RuleFragments(ISerializationContext context, RuleFragments semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RULE_FRAGMENTS__RULE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RULE_FRAGMENTS__RULE_NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RULE_FRAGMENTS__RULE_BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RULE_FRAGMENTS__RULE_BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRuleFragmentsAccess().getRuleNameIDTerminalRuleCall_1_0(), semanticObject.getRuleName());
		feeder.accept(grammarAccess.getRuleFragmentsAccess().getRuleBodyRuleBodyParserRuleCall_3_0(), semanticObject.getRuleBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Rules returns Rules
	 *
	 * Constraint:
	 *     ruleFragments+=RuleFragments+
	 */
	protected void sequence_Rules(ISerializationContext context, Rules semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubEvent returns SubEvent
	 *
	 * Constraint:
	 *     (amountEvent=AmountEvent amount=INT payerName=PayerName)
	 */
	protected void sequence_SubEvent(ISerializationContext context, SubEvent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SUB_EVENT__AMOUNT_EVENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SUB_EVENT__AMOUNT_EVENT));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SUB_EVENT__AMOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SUB_EVENT__AMOUNT));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SUB_EVENT__PAYER_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SUB_EVENT__PAYER_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSubEventAccess().getAmountEventAmountEventEnumRuleCall_1_0(), semanticObject.getAmountEvent());
		feeder.accept(grammarAccess.getSubEventAccess().getAmountINTTerminalRuleCall_2_0(), semanticObject.getAmount());
		feeder.accept(grammarAccess.getSubEventAccess().getPayerNamePayerNameEnumRuleCall_4_0(), semanticObject.getPayerName());
		feeder.finish();
	}
	
	
}

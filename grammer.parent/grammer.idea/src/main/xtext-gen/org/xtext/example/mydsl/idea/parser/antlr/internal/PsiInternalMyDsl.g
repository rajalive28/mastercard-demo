/*
 * generated by Xtext 2.9.2
 */
grammar PsiInternalMyDsl;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.xtext.example.mydsl.idea.lang.MyDslElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected MyDslGrammarAccess grammarAccess;

	protected MyDslElementTypeProvider elementTypeProvider;

	public PsiInternalMyDslParser(PsiBuilder builder, TokenStream input, MyDslElementTypeProvider elementTypeProvider, MyDslGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Rules";
	}

}

//Entry rule entryRuleRules
entryRuleRules returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getRulesElementType()); }
	iv_ruleRules=ruleRules
	{ $current=$iv_ruleRules.current; }
	EOF;

// Rule Rules
ruleRules returns [Boolean current=false]
:
	(
		(
			{
				markComposite(elementTypeProvider.getRules_RuleFragmentsRuleFragmentsParserRuleCall_0ElementType());
			}
			lv_ruleFragments_0_0=ruleRuleFragments
			{
				doneComposite();
				if(!$current) {
					associateWithSemanticElement();
					$current = true;
				}
			}
		)
	)*
;

//Entry rule entryRuleRuleFragments
entryRuleRuleFragments returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getRuleFragmentsElementType()); }
	iv_ruleRuleFragments=ruleRuleFragments
	{ $current=$iv_ruleRuleFragments.current; }
	EOF;

// Rule RuleFragments
ruleRuleFragments returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getRuleFragments_CreateRuleKeyword_0ElementType());
		}
		otherlv_0='create rule'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getRuleFragments_RuleNameIDTerminalRuleCall_1_0ElementType());
				}
				lv_ruleName_1_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_ruleName_1_0);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getRuleFragments_LeftCurlyBracketKeyword_2ElementType());
		}
		otherlv_2='{'
		{
			doneLeaf(otherlv_2);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getRuleFragments_RuleBodyRuleBodyParserRuleCall_3_0ElementType());
				}
				lv_ruleBody_3_0=ruleRuleBody
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getRuleFragments_RightCurlyBracketKeyword_4ElementType());
		}
		otherlv_4='}'
		{
			doneLeaf(otherlv_4);
		}
	)
;

//Entry rule entryRuleRuleBody
entryRuleRuleBody returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getRuleBodyElementType()); }
	iv_ruleRuleBody=ruleRuleBody
	{ $current=$iv_ruleRuleBody.current; }
	EOF;

// Rule RuleBody
ruleRuleBody returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getRuleBody_WhenKeyword_0ElementType());
		}
		otherlv_0='when'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getRuleBody_PayerEventPayerEventParserRuleCall_1_0ElementType());
				}
				lv_payerEvent_1_0=rulePayerEvent
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getRuleBody_SubEventSubEventParserRuleCall_2_0ElementType());
				}
				lv_subEvent_2_0=ruleSubEvent
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
	)
;

//Entry rule entryRulePayerEvent
entryRulePayerEvent returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getPayerEventElementType()); }
	iv_rulePayerEvent=rulePayerEvent
	{ $current=$iv_rulePayerEvent.current; }
	EOF;

// Rule PayerEvent
rulePayerEvent returns [Boolean current=false]
:
	(
		(
			(
				{
					markComposite(elementTypeProvider.getPayerEvent_PayerNamePayerNameEnumRuleCall_0_0ElementType());
				}
				lv_payerName_0_0=rulePayerName
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getPayerEvent_PayerEventNamePayerEventNameEnumRuleCall_1_0ElementType());
				}
				lv_payerEventName_1_0=rulePayerEventName
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getPayerEvent_SymbolSymbolEnumRuleCall_2_0ElementType());
				}
				lv_symbol_2_0=ruleSymbol
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			(
				{
					markLeaf(elementTypeProvider.getPayerEvent_AmountINTTerminalRuleCall_3_0ElementType());
				}
				lv_amount_3_0=RULE_INT
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_amount_3_0);
				}
			)
		)
	)
;

//Entry rule entryRuleSubEvent
entryRuleSubEvent returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getSubEventElementType()); }
	iv_ruleSubEvent=ruleSubEvent
	{ $current=$iv_ruleSubEvent.current; }
	EOF;

// Rule SubEvent
ruleSubEvent returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getSubEvent_ThenKeyword_0ElementType());
		}
		otherlv_0='then '
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getSubEvent_AmountEventAmountEventEnumRuleCall_1_0ElementType());
				}
				lv_amountEvent_1_0=ruleAmountEvent
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			(
				{
					markLeaf(elementTypeProvider.getSubEvent_AmountINTTerminalRuleCall_2_0ElementType());
				}
				lv_amount_2_0=RULE_INT
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_amount_2_0);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getSubEvent_ToKeyword_3ElementType());
		}
		otherlv_3='to'
		{
			doneLeaf(otherlv_3);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getSubEvent_PayerNamePayerNameEnumRuleCall_4_0ElementType());
				}
				lv_payerName_4_0=rulePayerName
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
	)
;

// Rule PayerName
rulePayerName returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getPayerName_MINDTREEEnumLiteralDeclaration_0ElementType());
			}
			enumLiteral_0='mindtree'
			{
				doneLeaf(enumLiteral_0);
			}
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getPayerName_ROHITEnumLiteralDeclaration_1ElementType());
			}
			enumLiteral_1='rohit'
			{
				doneLeaf(enumLiteral_1);
			}
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getPayerName_ABHISHEKEnumLiteralDeclaration_2ElementType());
			}
			enumLiteral_2='abhishek'
			{
				doneLeaf(enumLiteral_2);
			}
		)
	)
;

// Rule PayerEventName
rulePayerEventName returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getPayerEventName_CREDITEnumLiteralDeclaration_0ElementType());
			}
			enumLiteral_0='credit'
			{
				doneLeaf(enumLiteral_0);
			}
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getPayerEventName_DEBITEnumLiteralDeclaration_1ElementType());
			}
			enumLiteral_1='debit'
			{
				doneLeaf(enumLiteral_1);
			}
		)
	)
;

// Rule Symbol
ruleSymbol returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getSymbol_GREATEREnumLiteralDeclaration_0ElementType());
			}
			enumLiteral_0='<'
			{
				doneLeaf(enumLiteral_0);
			}
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getSymbol_LESSEnumLiteralDeclaration_1ElementType());
			}
			enumLiteral_1='>'
			{
				doneLeaf(enumLiteral_1);
			}
		)
	)
;

// Rule AmountEvent
ruleAmountEvent returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getAmountEvent_TRANSFEREnumLiteralDeclaration_0ElementType());
			}
			enumLiteral_0='transfer'
			{
				doneLeaf(enumLiteral_0);
			}
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getAmountEvent_REQUESTEnumLiteralDeclaration_1ElementType());
			}
			enumLiteral_1='request'
			{
				doneLeaf(enumLiteral_1);
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
